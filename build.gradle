//Control properties:
//Maven: // set the properties via -P to publish to your company repo
//Maven:
//nexusUrl
//nexusUsernamem
//nexusPassword
//
//bintrayUsername
//bintrayApiKey
//
//sonar.host.url
//sonar.login

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}
plugins {
    id "org.sonarqube" version "2.6.2"
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'distribution'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'


group = 'de.qaware.xff'
version = '1.0-SNAPSHOT'
description = """"""


sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version:'2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version:'2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version:'2.7'
    testCompile group: 'org.springframework', name: 'spring-test', version:'5.0.2.RELEASE'
    testCompile group: 'org.springframework', name: 'spring-web', version: '5.0.2.RELEASE'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version:'2.13.0'
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}


jacoco {
    toolVersion = "0.8.0"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}


sonarqube {
    properties {
        property "sonar.host.url", System.env.SONAR_URL
        property "sonar.login", System.env.SONAR_TOKEN
        property "sonar.projectName", "x-forwarded-filter"
    }
}

//com.github.hierynomus.license
license {
    mapping {
        java = 'SLASHSTAR_STYLE'

    }
    header rootProject.file('LICENSE_HEADER')
    strictCheck true
    include '**/*.kt'
    include '**/*.java'
}

release {
    preTagCommitMessage = '[#1] Gradle Release Plugin - pre tag commit: '
    tagCommitMessage = '[#1] Gradle Release Plugin - creating tag: '
    newVersionCommitMessage = '[#1] Gradle Release Plugin - new version: '
    tagTemplate = 'v${version}'
    buildTasks = ['clean', 'build']
}

task updateVersionInReadme {
    description = "Update the versions in the README to the current version"
    group = "release"
    doFirst {
        println "Updating version in README.md to ${version}."
        def newReadme = file('README.md').text
                .replaceAll(/<version>[\d.]+<\/version>/, "<version>${version}</version>")
                .replaceAll(
                /compile group: 'de\.qaware\.xff', name: 'x-forwarded-filter', version: '[\d.]+'/,
                "compile group: 'de.qaware.xff', name: 'x-forwarded-filter', version: '${version}'")

        file('README.md').write(newReadme)
    }
}

// Update versions in README before committing the release version
confirmReleaseVersion.dependsOn updateVersionInReadme

afterReleaseBuild.dependsOn bintrayUpload

def pomConfig = {

    inceptionYear '2018'

    scm {
        connection "scm:git:${project.scmUrl}"
        developerConnection "scm:git:${project.scmUrl}"
        url project.websiteUrl
    }

    issueManagement {
        system 'GitHub'
        url project.issueTrackerUrl
    }

    licenses {
        license([:]) {
            name ' Apache-2.0'
            url 'https://opensource.org/licenses/Apache-2.0'
            distribution 'repo'
        }
    }

    organisation {
        name 'QAware GmbH'
        url 'https://www.qaware.de'
    }

    developers {
        developer {
            id 'Michael-Frank'
            name 'Michael Frank'
            email 'michael.frank@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
    }
}

publishing {
    publications {
        xForwardedFilter(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                asNode().appendNode('packaging', 'jar')
                asNode().appendNode('name', project.fullName)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', project.websiteUrl)

                asNode().children().last() + pomConfig
            }
        }
    }
    repositories {
        // set the properties via -P to publish to your company repo
        maven {
            url = project.hasProperty('nexusUrl') ? project.nexusUrl : ''
            credentials {
                username = project.hasProperty('nexusUsername') ? project.nexusUsername : ''
                password = project.hasProperty('nexusPassword') ? project.nexusPassword : ''
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
    publications = ['xForwardedFilter']
    dryRun = false
    publish = true
    pkg {
        repo = project.bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        labels = ['forwarded', 'RFC7239', 'x-forwarded', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix', 'servletfilter'  ]
        websiteUrl = project.websiteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
            vcsTag = "v${project.version}"
            mavenCentralSync {
                sync = true
            }
        }
    }
}

distributions {
    release {
        contents {
            from ('build/libs') {
                include '*.jar'
            }
            from 'README.md'
            from 'LICENSE'
        }
    }
}

// Make sure the sources jar is there when packaging the
// distribution archives.
jar.finalizedBy sourcesJar